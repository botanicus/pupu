#!/usr/bin/env ruby1.9
# encoding: utf-8

base   = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__
libdir = File.expand_path(File.join(File.dirname(base), "..", "lib"))

vendor = File.join(File.dirname(__FILE__), "..", "vendor")
if File.directory?(vendor)
  Dir["#{vendor}/*"].each do |path|
    if File.directory?(path) && Dir["#{path}/*"].empty?
      warn "Dependency #{File.basename(path)} in vendor seems to be empty. Run git submodule init && git submodule update to checkout it."
    elsif File.directory?(path) && File.directory?(File.join(path, "lib"))
      $:.unshift(File.join(path, "lib"))
    end
  end
end

# because of system installation, there is bin/../lib, but not bin/../lib/pupu
if File.directory?(File.join(libdir, "pupu"))
  $:.unshift(libdir) unless $:.include?(libdir)
end

# === Helpers === #
# TODO: Generators.each { |generator| puts generator.help }
def usage
<<-HELP
=== Usage ===
pupu create project mootools  Generate pupu mootools
HELP
end

begin
  case ARGV.shift
  when nil
    abort usage
  when "install"
    require "pupu/cli"
    Pupu::CLI.install(*ARGV)
  when "uninstall", "remove"
    require "pupu/cli"
    Pupu::CLI.uninstall(*ARGV)
  when "update"
    require "pupu/cli"
    Pupu::CLI.update(*ARGV)
  when "list" # list all pupus
    require "pupu/cli"
    Pupu::CLI.list
  when "check" # check setup & if you are in the right directory
    require "pupu/cli"
    Pupu::CLI.check || abort("File config/pupu.rb doesn't exist or can't be loaded")
  when "search"
    require "pupu/cli"
    Pupu::CLI.search(ARGV.first)
  when "create"
    begin
      require "simple-templater"
    rescue LoadError
      abort "You have to install simple-templater first!"
    end
    # TODO: use generator set directly
    templater = SimpleTemplater.new(:pupu)
    # This enables you to create custom generators for Rango
    load File.join(File.dirname(base), "..", "simple-templater.scope") # neccesary if we run rango locally and not from RubyGems
    templater.discover!
    generator_set = templater.find(:pupu)
    if generator_set.nil?
      abort "Generator pupu doesn't exist. Available generators are: #{templater.generators.map { |set| set.name }.inspect}"
    else
      begin
        generator_set.run(ARGV)
      rescue SimpleTemplater::TargetDirectoryAlreadyExist => exception
        abort exception.message
      rescue Interrupt
        exit
      rescue Exception => exception
        abort "Exception #{exception.inspect} occured during running generator #{generator_set.inspect}\n#{exception.backtrace.join("\n")}"
      end
    end
  end
end
