#!/usr/bin/env ruby
# encoding: utf-8

# follow symlink
base   = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__
libdir = File.expand_path(File.join(File.dirname(base), "..", "lib"))

# because of system installation, there is bin/../lib, but not bin/../lib/pupu
if File.directory?(File.join(libdir, "pupu"))
  $:.unshift(libdir) unless $:.include?(libdir)
end

# === Helpers === #
# TODO: Generators.each { |generator| puts generator.help }
def usage
<<-HELP
=== Usage ===
pupu install [pupu]
pupu uninstall [pupu]
pupu update [pupu|all]
pupu list
pupu check
pupu search [pattern]
pupu create [name]
     --media-root=media
HELP
end

begin
  case ARGV.shift
  when nil
    abort usage
  when "install"
    require "pupu/cli"
    Pupu::CLI.new(ARGV).install
  when "uninstall", "remove"
    require "pupu/cli"
    Pupu::CLI.new(ARGV).uninstall
  when "update"
    require "pupu/cli"
    Pupu::CLI.new(ARGV).update
  when "list" # list all pupus
    require "pupu/cli"
    Pupu::CLI.new(ARGV).list
  when "check" # check setup & if you are in the right directory
    require "pupu/cli"
    Pupu::CLI.new(ARGV).check || abort("File config/pupu.rb doesn't exist or can't be loaded")
  when "search"
    require "pupu/cli"
    Pupu::CLI.new(ARGV).search(ARGV.first)
  when "create"
    begin
      require "simple-templater"
    rescue LoadError
      abort "You have to install simple-templater first!"
    end
    path = File.expand_path(File.join(File.dirname(base), "..", "stubs", "pupu"))
    generator = SimpleTemplater::GeneratorSet.new(:pupu, path)
    begin
      generator.run(ARGV)
    rescue SimpleTemplater::TargetAlreadyExist => exception
      abort exception.message
    rescue Interrupt
      exit
    rescue Exception => exception
      abort "Exception #{exception.inspect} occured during running generator #{generator.inspect}\n#{exception.backtrace.join("\n")}"
    end
  end
end
